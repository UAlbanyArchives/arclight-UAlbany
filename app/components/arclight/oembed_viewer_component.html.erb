<% if @resource.respond_to?(:action) and @resource.action.downcase == "embed" %>
  <% if @resource.href =~ %r{https://media\.archives\.albany\.edu/([^/]+)/([^/]+)/manifest\.json} %>
    <% collection_id = Regexp.last_match(1) %>
    <% object_id = Regexp.last_match(2) %>
    <a href="https://media.archives.albany.edu?collection=<%= collection_id %>&id=<%= object_id %>" class="fullscreen-btn mirador-fullscreen btn btn-secondary btn-sm">
      <i class="fas fa-expand me-1"></i> Fullscreen
    </a>
  <% end %>

  <% if @resource.resource_type == "Web Archive" %>
    <a href="<%= @resource.href %>" class="fullscreen-btn btn btn-secondary btn-sm">
      <i class="fas fa-expand me-1"></i> Fullscreen
    </a>
    <iframe src="<%= @resource.href %>" class="card p-2 mb-3" style="height: 80vh; width: 100%;"></iframe>
  <% elsif @resource.resource_type == "Audio" %>
    <div class="mirador-container mirador-audio mb-3" id="mirador-container"></div>
  <% else %>
    <div class="mirador-container mb-3" id="mirador-container"></div>
  <% end %>
  
  <% if @resource.respond_to?(:replay_content) && @resource.replay_content.present? %>
    <% transcript_url = @resource.replay_content %>
  <% else %>
    <% transcript_url = @resource.href.sub('manifest.json', 'content.txt') %>
  <% end %>

  <div class="d-flex align-items-start mt-2">
    <!-- PDF button -->
    <div id="pdfButtonContainer">
      <% if @resource.respond_to?(:replay_pdf) && @resource.replay_pdf.present? %>
        <a href="<%= @resource.replay_pdf %>" target="_blank" rel="noopener" class="btn btn-outline-danger pdf-btn btn-sm me-2"><i class="fas fa-file-pdf"></i> View PDF</a>
      <% end %>
    </div>
    
    <!-- Transcript button -->
    <% if @resource.resource_type != "Image" %>
      <% transcript_text = URI.open(transcript_url).read rescue nil %>
      <div class="transcript-section">
        <button 
          class="btn btn-outline-secondary btn-sm" 
          type="https://github.com/orgs/UAlbanyArchives/projects/3/views/4button" 
          data-bs-toggle="collapse" 
          data-bs-target="#transcriptContent" 
          aria-expanded="false" 
          aria-controls="transcriptContent"
          id="loadTranscriptBtn"
          data-transcript-url="<%= @resource.href.sub('manifest.json', 'content.txt') %>">
          <i class="fas fa-file-alt me-1"></i> 
          <span class="me-1">Show Transcript</span>
          <i class="fas fa-chevron-down ms-auto collapse-chevron"></i>
        </button>
      </div>
    <% end %>
  </div>

  <!-- Collapsible transcript content -->
  <div class="collapse transcript-body" id="transcriptContent">
    <div class="card card-body mt-1 p-2" id="transcriptText">
      <pre class="mb-0 p-2"><%= transcript_text.present? ? transcript_text : "Transcript unavailable." %></pre>
    </div>
  </div>
<% else %>
  <a class="plain_link" href="<%= @resource.href %>"><%= @resource.label %></a>
<% end %>

<%= javascript_include_tag "https://media.archives.albany.edu/mirador.min.js" %>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const collapseEl = document.getElementById("transcriptContent");
    const btn = document.getElementById("loadTranscriptBtn");
    const chevron = btn.querySelector(".collapse-chevron");
    
    collapseEl.addEventListener("show.bs.collapse", () => {
      chevron.classList.add("rotate");
    });
    collapseEl.addEventListener("hide.bs.collapse", () => {
      chevron.classList.remove("rotate");
    });
  });

  document.addEventListener("DOMContentLoaded", function() {
    const container = document.getElementById("pdfButtonContainer");
    const manifestUrl = "<%= @resource.href %>";

    fetch(manifestUrl)
      .then(response => {
        if (!response.ok) throw new Error("Manifest not found");
        return response.json();
      })
      .then(data => {
        if (data.rendering && Array.isArray(data.rendering)) {
          // Find a PDF rendering
          const pdf = data.rendering.find(r => r.format === "application/pdf");
          if (pdf && pdf.id) {
            const btn = document.createElement("a");
            btn.href = pdf.id;
            btn.target = "_blank";
            btn.rel = "noopener";
            btn.className = "btn btn-outline-danger pdf-btn btn-sm me-2";
            btn.innerHTML = '<i class="fas fa-file-pdf"></i> View PDF';
            container.appendChild(btn);
          }
        }
      })
      .catch(err => {
        console.error("Error loading manifest:", err);
      });
  });
  document.addEventListener('DOMContentLoaded', () => {
    const miradorContainer = document.getElementById('mirador-container');
    const isMobile = window.innerWidth <= 768;
    const query = window.initialSearchQuery;  // your initial search query or undefined/null

    const manifestUrl = '<%= @resource.href %>';
    const manifestPath = manifestUrl.replace(/\/manifest\.json$/, '');
    const pathParts = manifestPath.split('/').filter(Boolean);
    const searchServiceId = `https://media.archives.albany.edu/search/1/${pathParts[2]}/${pathParts[3]}`;

    // Conditionally set sidebar config based on presence of search query
    const sidebarConfig = query
      //? { defaultSideBarPanel: 'search', sideBarOpenByDefault: true }
      ? { defaultSideBarPanel: 'none', sideBarOpenByDefault: false }
      : { defaultSideBarPanel: 'none', sideBarOpenByDefault: false };


    // Function to get query parameter value by name
    function getQueryParam(name) {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get(name);
    }
    // Mirador uses 0-based canvasIndex, so subtract 1
    const pageParam = parseInt(getQueryParam('page'), 10);
    const canvasIndex = !isNaN(pageParam) ? pageParam - 1 : 0;

    const viewer = Mirador.viewer({
      id: 'mirador-container',
      windows: [{
        loadedManifest: '<%= @resource.href %>',
        allowFullscreen: true,
        thumbnailNavigationPosition: isMobile ? 'off' : 'far-right',
        zoomControls: true,
        canvasIndex: canvasIndex,
      }],
      requestConfig: { credentials: 'include' },
      workspaceControlPanel: { enabled: false },
      workspace: { showZoomControls: true },
      themes: {
        light: {
          palette: { primary: { main: '#46166B' } }
        }
      },
      window: {
        allowClose: false,
        //...sidebarConfig
      },
      miradorSharePlugin: {
        embedOption: {
          enabled: true,
          embedUrlReplacePattern: [/^/, 'https://media.archives.albany.edu/?manifest=']
        },
        shareLink: {
          enabled: true,
          manifestIdReplacePattern: [/^/, 'https://media.archives.albany.edu/?manifest=']
        }
      }
    });

    /*let hasDispatched = false;
    const unsubscribe = viewer.store.subscribe(() => {
      if (hasDispatched) return;

      const state = viewer.store.getState();
      const windowIds = Object.keys(state.windows || {});
      if (windowIds.length === 0) return;

      const windowId = windowIds[0];
      const windowState = state.windows[windowId];

      if (windowState.canvasId && query && !windowState.query) {
        hasDispatched = true;

        viewer.store.dispatch({
          type: 'mirador/REQUEST_SEARCH',
          windowId,
          searchId: `${searchServiceId}?q=${encodeURIComponent(query)}`
        });

        injectSearchQuery(query);

        unsubscribe();
      }
    });

    function injectSearchQuery(query) {
      const inputCheckInterval = setInterval(() => {
        const inputBox = document.querySelector('input[id^="search-cw-"]');
        const form = inputBox?.closest('form');
        const submitBtn = form?.querySelector('button[type="submit"]');

        if (inputBox && form && submitBtn) {
          const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
          nativeInputValueSetter.call(inputBox, query);

          inputBox.dispatchEvent(new Event('input', { bubbles: true }));

          form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));

          clearInterval(inputCheckInterval);
        }
      }, 200);
    }*/

    miradorContainer.addEventListener('click', (event) => {
      const fullscreenBtn = event.target.closest('.mirador-fullscreen-button');
      if (!fullscreenBtn) return;

      event.preventDefault();

      if (!document.fullscreenElement) {
        miradorContainer.requestFullscreen?.() ||
        miradorContainer.webkitRequestFullscreen?.() ||
        miradorContainer.msRequestFullscreen?.();
      } else {
        document.exitFullscreen?.() ||
        document.webkitExitFullscreen?.() ||
        document.msExitFullscreen?.();
      }
    });

    document.addEventListener('fullscreenchange', () => {
      const state = viewer.store.getState();
      const windowIds = Object.keys(state.windows || {});
      if (windowIds.length === 0) return;

      const windowId = windowIds[0];

      if (document.fullscreenElement) {
        viewer.store.dispatch({
          type: 'mirador/UPDATE_VIEWPORT',
          windowId,
          payload: { zoom: 1 }
        });
      } else {
        viewer.store.dispatch({
          type: 'mirador/FIT_TO',
          windowId,
          payload: { mode: 'width' }
        });
      }
    });
  });
</script>
